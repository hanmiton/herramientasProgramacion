1.- Navegador Web (Google Chrome)
2.- SublimeText2
	*https://www.youtube.com/watch?v=q3zwVRZAsBI
		- Install package control
		- Emment
		- Stylus
	*https://www.youtube.com/watch?v=_gs_EIPkMVo
		- ctrl+P explorar
		- ctrl+D Selecconar Palabra (puede ser varia veces)
		- ctrl++ aumente fuente
		- ctrl-- disminuye fuente
		- ctrl+shift+P Package control
		- ctrl+shift+flechas Mover bloques de código arriba abajo
		- ctrl+l copiar lines distintas
		- #id, .clases, >elementos_adentro, +hermano, *(#veces), {Enlace $} (escribir texto etiqueta) ($aumenta desde 1 hasta el numero de etiquetas existentes), p[media=hola] para poner los atributos con emment
3.- Git
	*http://rogerdudler.github.io/git-guide/index.es.html
		- git config --global user.name aaaaa
		- git config --global user.email aaaa@gmail.com
		- git init (iniciar nuevo repo)
		- git clone /path (clonar un repo)
		Subir Version
			- git status (observar situacion)
			- git add .(añadir cambios stage area)
			- git commit -m "mensaje" (subir version)
4.- GitHub
	*http://rogerdudler.github.io/git-guide/index.es.html
		-git remote add origin <server> (añadir un destino)
		-git push origin master (subir a repositorio GitHub)
5.- Html5
	-<head></head> cotiene todo lo que no se ve como enalces de stilos y javascript y </meta>
	-<title></title> para poner el titulo que sale en la pestaña
	-<style src="/path/archivo"><style> ./(donde estamos) ../(regresamos uno) ../../(regresamos varios pasos atas en el path) (se recomienda poner este tipo de etiquetas al final del body para que no sean bloqueantes, se recomienda usar cdn para no usar procesamiento de nuestros servidores)
	-<script src="/path/archivo"></script> ./(donde estamos) ../(regresamos uno) ../../(regresamos varios pasos atas en el path)
	-<meta charset="UTF-8"> indicar tipo de codificacion
	-<body></body> cuerpo de la pagina
	-<header></header> cabezera
	-<nav></nav> navegacion
	-<section></section> agregar una seccion en el dom
	-<article></article> agrar un articl edentro de un seccion
	-<aside></aside> parte lateral del dom
	-<footer></footer> pie de la pagina
	-<div></div> contenedor tipo caja
	-<a></a> para poner enlaces(ligas, link)
	ResponsiveDesign
		-<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
6.- Css3
	Propiedades de los contenedores padres
		-display: flex;
		-flex-direction: row; column;
		-justify-content: flex-start;flex-end;center;space-between;space-around;
	Propiedades de los elementos
		-order: <integer>
		-flex-grow: <number>; ancho del elemento con respecto al contenedor

7.-Filezilla
	ftp para subir las paginas web
8.-Carpetas
	-Proyecto
		-src (donde vamos a estar trabajando)
		-build (donde van estar los archivos compilados y minificados)
		-dist (donde esta la produccion final)
9.-Node.js
	Procesos para empezar con el desarrollo
10.-Gulp.js
	npm install gulp -g (instalar gulp de forma global)
	gulpfile.js (se lo crea en la archivo raiz)
	Instalamos en el proyecto las dependencias
		-npm install gulp --save-dev
		-npm install --save-dev gulp-webserver
		-npm install --save-dev gulp-stylus
		-npm install --save-dev gulp-minify-css
11.-Stylus
	npm install stylus -g (instalar sylus de forma global)
	NIB (Aumenta prefijo para navegadores para que comprendan css)
		-npm install --save-dev nib

12.-Agregacion de plugins y librerias y dependencias
	-npm install gulp --save-dev
	-npm install --save-dev gulp-webserver

Nota: Ignorar carpeta node_modules para hacer repositorio en git

13.- configurar archivo gulpfile.js
	var gulp = require('gulp');
	var webserver = require('gulp-webserver');
	var stylus = require('gulp-stylus');
	var nib = require('nib');
	var minifyCSS = require('gulp-minify-css');

	var config = {
		styles:{
			main: './src/styles/main.styl',
			watch : './src/styles/**/*.styl',
			output: './build/css'
		},
		html: {
			watch: './src/*.html'
		}
	}

	gulp.task('server',function(){
		gulp.src('./build')
			.pipe(webserver({
				host: '0.0.0.0',
				port: 8080,
				livereload: true
			}));
	});

	gulp.task('build:css', function(){
		gulp.src(config.styles.main)
			.pipe(stylus({
				use: nib(),
				'include css': true
			}))
			.pipe(minifyCSS())
			.pipe(gulp.dest(config.styles.output));
	});

	gulp.task('watch',function(){
		gulp.watch(config.styles.watch,['build:css']);
		gulp.watch(config.html.watch, ['build']);

	});
	gulp.task('build',['build:css']);
	gulp.task('default',['server','watch','build']);

	/****revisar gulp****/

14. gitignore =>ignorar node modules
	*https://www.youtube.com/watch?v=f1NYnGXbUxg
	Pasos
	Crear un archivo en el proyecto raiz
	.gitignore
		/node_modules

15. Normalize (para igualar los estilos a todos los navegadores)
	*https://github.com/necolas/normalize.css/
	*https://raw.githubusercontent.com/necolas/normalize.css/master/normalize.css

	Para importar 
		-@import './normalize.css' (importa desde main.styl)
		-@import './reset' (no se necesita poner la extension si es un archivo styl)
16. Reset.styl
	div,
	header,
	section,
	article,
	nav,
	ul,
	ol,
	li,
	h1,
	h2,
	h3,
	h4,
	h5,
	h6
		margin 0
		padding 0
Nota: font-size 16px es el tamaño minimo para la fuente en un movil
	height 64px nav para dispositivos moviles

17.- Css (Stylus)
	Principales Estilos
	font-size (tamaño de la fuente)
	background-color (color de fondo)
	color (color del texto)
	height (alto)
	width (ancho)
	position fixed (fijar posicion expecificar top 0 lef 0 (coordenadas))
	z-indez 10 (capas en el eje z)
	list-style-type (consultar para que sirve)
	overflow hidden (cuando existe contenido fuera de un contenedor se lo puede ocultar con overflow aplicar al contenedor de los items)
	text_decoration (quitar los subrayados y decoraciones de los enlaces)
	border-radius (poner bordes redondeados css)
	transition height 0.3s ease (es para dar transicion a un elemento) Nota: 0.3s es aconsejable para que no consuma muchos recursos la transisocno

18.-metodologia bem
	-elemento
	--modificador

19.-Media Query
	@media(min-width: 768px)
	.header
		&-btn-nav
			display none

	Nota: aconsejable primer break point 768px que viene a ser tamaños ya para tablets

20.- Imagenes responsive
	<section class="content-text">
		<picture>
			<source media="(min-width:768px)" srcset="img/img01">
			<source media="(min-width:320px)" srcset="img/img01-mobile-retina.jpg 2x">
			<img src="img/img01-mobile.jpg" alt="">
		</picture>
	</section>
	Nota: con 2x se indica si el coputador tiene el doble de densidad e pixel o es retina
21.- Lazy loading
	function loadCSS(url){
			var elem = document.createElement('link');
			elem.rel = 'stylesheet';
			elem.href= url;
			document.head.appendChild(elem);
		}

22. Browserify
	npm i -D browserify
	npm i -D vinyl-buffer vinyl-source-stream
	(esto es para que trabaje browserify y para mover el ficher donde lo deja por defecto browserify)

21.- Uglify
	permite modificar el nombre de las clases par que sean mas cortos y asi q pese menos el archivo
	npm i -D gulp-uglify

22.- PageSpeed Insights
	Nos permite ver como califica google a nuestra pagina

23.- plugins para optimizacion de imagenes

	npm i -D gulp-image-optimization
24.- plugins para poner el codigo inline 
	npm i -D gulp-smoosher

25.- Para usar smoosh

<!--smoosh -->
	<link rel="stylesheet" href="./css/main.css">
<!-- endsmoosh-->


***********ENTORNO DE DESARROLLO**********
var gulp = require('gulp');
	Sistema de construcción que permite automatizar tareas comunes de desarrollo
var webserver = require('gulp-webserver');
	Webserver local que permite ejecutar nuestro programa en local
var stylus = require('gulp-stylus');
	Preprocesador de css3
var nib = require('nib');
	Añade los prefijos para que el codigo siva en la mayoria de navegadores
var minifyCSS = require('gulp-minify-css');
	Minifica el css
var browserify = require('browserify');
	Permite tener codigo modular el cual este se encarga despues de unir y hacer un solo index.html
var source = require('vinyl-source-stream');
	Permite modificar el lugar donde guarda broserify
var buffer = require('vinyl-buffer');
	Permite modificar el lugar donde guarda broserify
var uglify = require('gulp-uglify');
	Permite poner el codigo de javascript en un solo archivo
var smoosher = require('gulp-smoosher');
	Permite poner el codigo inline
var imageop = require('gulp-image-optimization');
	Permite la optimizaicon de las imagenes
var config = {
  styles: {
    main: './src/styles/main.styl',
    watch: './src/styles/**/*.styl',
    output: './build/css'
  },
  rutas para construir un solo archivo de styl y final un css
  html: {
    watch: './build/*.html'
  },
  ruta para escuchar el html que se esta haciendo
  scripts: {
    main: './src/scripts/main.js',
    watch: './src/script/**/*.js',
    output: './build/js'
  },
  rutas para hacer un solo javascript
  images: {
    watch: ['./build/img/*.png', './build/img/*.jpg'],
    output: './dist/img'
  }
  ruta par ala optimizacion de las imagenes
}

gulp.task('server', function() {
  gulp.src('./build')
    .pipe(webserver({
      host: '0.0.0.0',
      port: 8080,
      livereload: true
    }));
});
tarea para inicializar el servidor

gulp.task('build:css', function() {
  gulp.src(config.styles.main)
    .pipe(stylus({
      use: nib(),
      'include css': true
    }))
    .pipe(minifyCSS())
    .pipe(gulp.dest(config.styles.output));
});

tarea para añadir lo prefijos con nib y hacer un solo archivo css

gulp.task('build:js', function() {
  return browserify(config.scripts.main)
    .bundle()
    .pipe(source('bundle.js'))
    .pipe(buffer())
    .pipe(uglify())
    .pipe(gulp.dest(config.scripts.output));
});

tarea pra crear un solo archivo de js
gulp.task('watch', function() {
  gulp.watch(config.images.watch, ['images']);
  gulp.watch(config.scripts.watch, ['build:js']);
  gulp.watch(config.styles.watch, ['build:css']);
  gulp.watch(config.html.watch, ['build']);
});
tarea que pasa revisando o viendo si se modifica alguno de los elementos

gulp.task('images', function() {
  gulp.src(config.images.watch)
    .pipe(imageop({
      optimizationLevel: 5,
      progressive: true,
      interlaced: true
    }))
    .pipe(gulp.dest(config.images.output));
});

tarea que permite la optimizacion de las imagenes
gulp.task('inline', function() {
  gulp.src('./build/index.html')
    .pipe(smoosher())
    .pipe(gulp.dest('./dist'));
});
tarea que permite poner el codigo css y js inline en el codigo html
gulp.task('build', ['build:css', 'build:js', 'images', 'inline']);

corre las tareas anteriormente declaradas
gulp.task('default', ['server', 'watch', 'build']);

corre las tareas servidor, mirar, construir

26.- Angular
	- Framework de frontend
	- Local Storage
		- Variable global dentro del browser windows (mejor practica hacer la inyeccion de window ) 
		- Inicializar LocalStorage
			var localStorage = $windows.localstorage;  --revisar video
			-funciones
				getItem();
		Buena practica inicializar arreglo de comentarios como vacio
			if(!comments){
				comments = [];
			}
			else {
				comments = JSON.parse(comments);
			}
		Parse ---revisar que es

-convertir un json a cadena
		Json.stringify(comments)

- consultar diferencia entre scope y this

firebug -=> permite hacer debug del codigo y acceder al locarStroage en google chrome viene integrado en las herrameintas de desarrollador


?tipos de directivas
- tipo E: elemento

-Directivas de angular.js
	@ campo de texto
	= binding de angular
	& esperando una funcion 

?consultar que es inyeccion en angular.js

-angular-md5
usar filtros de gravatar (permtie usar avatares en comentarios)
-angualrUI
contiene muchas diercitas consultar UI-Bootstrap
-Ui-Bootstrap
permite usar taba y paginacion
-para interactuar ocn la base de dato susar servcios REST usando un backend



27.- NoSql

- Not only SQL
- Sin relaciones(*)
- Distribuidas
- Expandibles
- Intentar no tener relaciones para la distribuicon para mas nodos
	- Usado de aplicaicones web
	- Aumento de datos
	- Esquemas dinámicos (cambiar estructura base de datos facilmente)
	- Facilidad de interacción 
?ver que es orm
Cuando usar?
- Relaciones debiles
- Estructuras dinámicas

TIPOS DE BD NOSQL
- Columnas (Casandra creado por facebook)
- Documentos (MongoDb parecido a un documetno llave/valor)
- Llave/valor (redis)
- Graph (teoria de grafos de ocmo se representa lod datos OrientDb)
- Multiples modelos (soporte para bases de datos NoSQL)
- Orientado a objetos ( se guarda tal cual las clases)



28.- BSON
- datos binarios muy parecidos a json


VER VIDEO DE INTRODUCCION A MONGO D


TEMA DE TESIS

-primero hablar de git y como se va utilizar para el control de versiones de la aplicacon a realziar
los comadnosy mas que se encutnrta especificados en las partes superiores
	https://git-scm.com/download/win
	-hablar de .gitignore para igonarar dependecias de desarroolaldor en la fase de desarrollo

-segundo hablar github y como se piensa usar como repositorio para las distintas versiones de codigo que se vayan generando de la app
	https://github.com/hanmiton

-tercero hablar de sublime editor de texto que se piensa utlizar para la programacion de la aplicacion
	https://www.sublimetext.com/3   dsfasdf

-cuarto prerequisitos para trabajar con angular
	tener instaldo git
	instalar sumblime text
	node.js y grunt (para uns ervidor realreload)

-quinto hablar de como se usa node.js que es node.js y como se va utilizar para la conexion con la base dedatos
	package.json
	el cual contiene todo lo relacionado con las devDependecias licencias  descripcion y scripts que se corretan la principio de la app vesion nombre y etc

-sexto hablar de gruntfile
	como nos permite un realreload y como automaticas las distintas tareas que deseemos
	automatizar y no llevarlas acabo maualmente

-septimo hablar de angular y como se piens ausar
	Framework mvc (modelo vista controlador)
	Por equipo de desarrollo de google
	Busca desarrollar apliciones web que sean modularres e interactivas
	Permite evitar las librerias y que no tengan relacion alguana ya que angular.js es un framewoek entero
	Estructurar app de una manera mas modular y sencilla


pasos para el proyecto
git init
git clone https://github.com/proyectos-mejorandola/pokedex.git

habl



